type Query {
  hello(name: String): String!
  quantity: Int!
  user(id: ID): [User!]!
  author(id: ID, take: Int, skip: Int, orderby: AuthorOrderByInput): [Author!]!
  book(id: ID, take: Int, skip: Int, orderby: BookOrderByInput): [Book!]!
}

type User {
  id: ID!
  name: String!
  lastname: String!
  email: String!
}

type Author {
  id: ID!
  name: String!
  country: String!
  register_by: User!
  book: [Book!]!
}

type Book {
  id: ID!
  title: String!
  description: String!
  quantity: Int!
  price: Float!
  writted_by: Author!
  register_by: User!
}

type Mutation {
  singUp(data: singUpInput!): AuthPayload!
  login(data: loginInput!): AuthPayload!
  updateUser(id: ID!, data: updateUserInput): User!
  createAuthor(data: createAuthorInput): Author!
  updateAuthor(id: ID!, data: updateAuthorInput): Author!
  createBook(data: createBookInput): Book!
  updateBook(id: ID!, data: updateBookInput): Book!
  deleteBook(id: ID!): Book!
}

type Subscription {
  count: Int!
  author: AuthorSubscriptionPayload!
  book(authorId: ID!): BookSubscriptionPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type AuthorSubscriptionPayload {
  mutation: MutationType!
  data: Author!
}

type BookSubscriptionPayload {
  mutation: MutationType!
  data: Book!
}

type AuthPayload {
  user: User!
  token: String!
}

input AuthorOrderByInput {
  id: OrderByArg
  name: OrderByArg
  country: OrderByArg
}

enum OrderByArg {
  asc
  desc
}

input BookOrderByInput {
  id: OrderByArg
  title: OrderByArg
  description: OrderByArg
  quantity: OrderByArg
  price: OrderByArg
}

input singUpInput {
  name: String!
  lastname: String!
  email: String!
  password: String!
}

input loginInput {
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  lastname: String
  email: String
  password: String
}

input createAuthorInput {
  name: String
  country: String
  register_by: ID!
}

input updateAuthorInput {
  name: String
  country: String
  register_by: ID
}

input createBookInput {
  title: String!
  description: String!
  quantity: Int!
  price: Int!
  writted_by: ID!
  register_by: ID!
}

input updateBookInput {
  title: String
  description: String
  quantity: Int
  price: Int
  writted_by: ID
  register_by: ID
}
